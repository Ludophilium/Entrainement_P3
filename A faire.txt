A faire : 

— Coder le jeu en utilisant la Programmation Orientée Objet

    Alors, si je m'appuie sur l'explication selon laquelle un objet est entre autres l'équivalent de l'entité physique qu'est l'objet, je pourrais créer une classe : 
        
        - Personnage. |
            — Inst : McGuyver, le Garde. | 
            — Subcl : Vu que le garde ne fait rien, pourquoi ne pas en faire un objet... Non,  vu qu'il doit tuer... Donc c'est un personnage... Mais entre les méthodes de Guyver et les siennes, on ne s'y retrouve pas... Alors pourquoi ne pas utiliser l'héritage ? Ou faire deux classes... Parce que l'héritage c'est 3. Sauf si McGuyver est la seule classe enfant, le Garde étant généré avec la classe Parent. 
            — Attr : objets_possedés, position_sur_terrain, nom, vivant (donc un booléen | ou nombre de vies), sprite. 
            — Meth (interactions) : déplacer_sur_terrain (p-ê plusieurs méth déplacer), ramasser_objet, endormir_garde (qui repose sur la pres des 3 obj /nom alternatif : gagner), tuer_guyer (qui peut-être une variante de endormir_garde. Si endormir_garde == False > GuyverCrève) | 
        
        - Items | 
            — Inst : aiguille, tube_plastique, ether | 
            — Attr : nom, position_sur_terrain (dont aucune donc None ?, à moins de créer un attribut est_présent), sprite_item | 
            — Meth : se_positionner

        — Niveau ? : |
            — Inst : Niveau ? 
            — Attr : name, structure_txt, structure_list, sprites ?
            — Meth : structure_txt_to_struct_list(generate), version_graphique
        
        - Fenetre_de_jeu ? | S'il y en a qu'une seule (et absolument une), pourquoi générer une classe fenetre ? | Mais il n'y a qu'un niveau aussi et pourtant on a bien créé une classe pour... ? | Et puis, créer une classe, c'est aussi structurer un programme. | Mais comment on fait pour la manipuler sinon ? Si on en fait un objet, on ne pourra appeler qu'une série limitée de méthodes dessus et certainement pas celles de Pygame. | A MOINS QUE... Faut tester. 
            Inst : Fenetre_jeu
            Attr : resolution, icone, titre
            Metho : generation (avec pygame.display.set_mode()), rafraichissement() ?

    Ok pour les différentes classes, du moins de mon expérience, mais par quoi on commence ?

        — Logiquement par la base et donc par l'affichage fenetre, la génération d'un niveau, la capacité à fermer fenêtre... Donc les classes : fenetre, niveau et la fonction main().

— Trouver un moyen d'expliquer les règles du jeu...