A faire : 

— Coder le jeu en utilisant la Programmation Orientée Objet

    Alors, si je m'appuie sur l'explication selon laquelle un objet est entre autres l'équivalent de l'entité physique qu'est un objet, je pourrais créer une classe : 
        
        - Personnage. |
           
            — Subcl : Vu que le garde ne fait rien, pourquoi ne pas en faire un objet... Non,  vu qu'il doit tuer... Donc c'est un personnage... Mais entre les méthodes de Guyver et les siennes, on ne s'y retrouve pas... Alors pourquoi ne pas utiliser l'héritage ? Ou faire deux classes... Parce que l'héritage c'est 3. Sauf si McGuyver est la seule classe enfant, le Garde étant généré avec la classe Parent. 
                        
            — Inst : McGuyver, le Garde. | 

            — Attr : 
                GYVR : objets_ramassés
                GURD : 
                PARTAGÉS * : position_sur_terrain, nom, conscient (donc un booléen | ou nombre d'essais, important pour la victoire ou la défaite), sprite. 

            — Meth (interactions) : 
            
                GYVR : endormir_garde (repose sur la possession des obj, réussi s'ils sont là, backfire si ce n'est pas le cas), se_déplacer, ramasser_objet,
                GURD : 
                PARTAGÉS * :  

            - Une classe ? Deux classes ? Sans lien entre elles ? Une classe et une sous classe ?
                - Une classe ? || Ce serait difficile... Les deux instances ne partagent pas exactement les mêmes attributs (bien qu'ils partagent la quasi-totalité), ET PAS DU TOUT les mêmes méthodes... | Ce serait possible, mais au prix de laisser des attributs et méthodes inutilisées pour certaines instances... 
                - Deux classes distinctes ? || Possible, mais vu qu'ils partagent beaucoup d'attributs entre eux, ça impliquerait de redefinir plusieurs fois les mêmes instances ce qui peut être laborieux... Autant on peut copier coller, autant ça prend des lignes de codes qu'on peut éviter.
                — Deux classes hiérachisées, l'une étant l'enfant de l'autre || Option possible, qui résout les problèmes à avoir deux classes distinctes tout en permettant au gardien et à Guyver d'avoir leurs méthodes et attributs distincts... 
                   
        
        - Items | 
            — Inst : aiguille, tube_plastique, ether | 
            — Attr : nom, position_sur_terrain (dont aucune donc None ?, à moins de créer un attribut est_présent), sprite_item | 
            — Meth : apparaitre, disparaitre.

        — [OK] Niveau ? : |
            — Inst : Niveau ? 
            — Attr : name, structure_txt, structure_list, sprites ?
            — Meth : structure_txt_to_struct_list(generate), version_graphique
        
        — [OK] Fenetre_de_jeu ? | S'il y en a qu'une seule (et absolument une), pourquoi générer une classe fenetre ? | Mais il n'y a qu'un niveau aussi et pourtant on a bien créé une classe pour... ? | Et puis, créer une classe, c'est aussi structurer un programme. | Mais comment on fait pour la manipuler sinon ? Si on en fait un objet, on ne pourra appeler qu'une série limitée de méthodes dessus et certainement pas celles de Pygame. | A MOINS QUE... Faut tester. 
            Inst : Fenetre_jeu
            Attr : resolution, icone, titre
            Metho : generation (avec pygame.display.set_mode()), rafraichissement() ?

    — Ok pour les différentes classes, du moins de mon expérience, mais par quoi on commence ?

        — Logiquement par la base et donc par l'affichage fenetre, la génération d'un niveau, la capacité à fermer fenêtre... Donc les classes : fenetre, niveau et la fonction main().

        - Une fois ceci terminé : 

— Trouver un moyen d'expliquer les règles du jeu...

- Comment coder le fait que le jeu soit gagné ? 